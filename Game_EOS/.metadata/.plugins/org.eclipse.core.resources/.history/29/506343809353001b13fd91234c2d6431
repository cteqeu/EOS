/*
    Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
    Copyright (c) 2012 - 2020 Xilinx, Inc. All Rights Reserved.
	SPDX-License-Identifier: MIT


    http://www.FreeRTOS.org
    http://aws.amazon.com/freertos


    1 tab == 4 spaces!
*/

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "MATRIX_IPBLOK_DEF.h"
#include "sleep.h"
#include "my_rotary_en.h"

int StateCounter = 0;
int value = 0;
int answer;//stores the Delay in Each Cycle of While Loop
int i;

#define INTC_DEVICE_ID		0
#define GPIO_INTERRUPT_ID	XPAR_XGPIOPS_0_INTR

/* The following constants define the GPIO banks that are used. */
#define GPIO_BANK	XGPIOPS_BANK0  /* Push Button Connected at Bank 0 of the GPIO Device */


#define LED_DELAY		10000000

#define LED_MAX_BLINK		0x10	/* Number of times the LED Blinks */

#define printf			xil_printf	/* Smalller foot-print printf */

#define TIMER_ID	1
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define TIMER_CHECK_THRESHOLD	9
/*-----------------------------------------------------------*/
static void GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId,
			   u16 GpioIntrId);
static void IntrHandler(void *CallBackRef, u32 Bank, u32 Status);//Called whenever we press the Switch
static int SetupInterruptSystem(XScuGic *Intc, XGpioPs *Gpio, u16 GpioIntrId);
static XGpioPs Gpio; /* The Instance of the GPIO Driver */

static XScuGic Intc; /* The Instance of the Interrupt Controller Driver */

static volatile u32 pattern=0; /* Intr status of the bank */
static u32 Input_Pin = 0u; /* Switch button */

/* The Tx and Rx tasks as described at the top of this file. */
static void prvTxTask( void *pvParameters );
static void prvRxTask( void *pvParameters );
static void vTimerCallback( TimerHandle_t pxTimer );
/*-----------------------------------------------------------*/

/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
static TaskHandle_t xTxTask;
static TaskHandle_t xRxTask;
static QueueHandle_t xQueue = NULL;
static TimerHandle_t xTimer = NULL;
char HWstring[15] = "Hello World";
long RxtaskCntr = 0;

int main( void )
{
	const TickType_t x10seconds = pdMS_TO_TICKS( DELAY_10_SECONDS );

	xil_printf("Game Test \r\n");
	GpioIntrExample(&Intc, &Gpio, GPIO_DEVICE_ID, GPIO_INTERRUPT_ID);
	/* Create the two tasks.  The Tx task is given a lower priority than the
	Rx task, so the Rx task will leave the Blocked state and pre-empt the Tx
	task as soon as the Tx task places an item in the queue. */
	xTaskCreate( 	prvTxTask, 					/* The function that implements the task. */
					( const char * ) "Tx", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xTxTask );

	xTaskCreate( prvRxTask,
				 ( const char * ) "GB",
				 configMINIMAL_STACK_SIZE,
				 NULL,
				 tskIDLE_PRIORITY + 1,
				 &xRxTask );

	/* Create the queue used by the tasks.  The Rx task has a higher priority
	than the Tx task, so will preempt the Tx task and remove values from the
	queue as soon as the Tx task writes to the queue - therefore the queue can
	never have more than one item in it. */
	xQueue = xQueueCreate( 	1,						/* There is only one space in the queue. */
							sizeof( HWstring ) );	/* Each space in the queue is large enough to hold a uint32_t. */

	/* Check the queue was created. */
	configASSERT( xQueue );

	/* Create a timer with a timer expiry of 10 seconds. The timer would expire
	 after 10 seconds and the timer call back would get called. In the timer call back
	 checks are done to ensure that the tasks have been running properly till then.
	 The tasks are deleted in the timer call back and a message is printed to convey that
	 the example has run successfully.
	 The timer expiry is set to 10 seconds and the timer set to not auto reload. */
	xTimer = xTimerCreate( (const char *) "Timer",
							x10seconds,
							pdFALSE,
							(void *) TIMER_ID,
							vTimerCallback);
	/* Check the timer was created. */
	configASSERT( xTimer );

	/* start the timer with a block time of 0 ticks. This means as soon
	   as the schedule starts the timer will start running and will expire after
	   10 seconds */
	xTimerStart( xTimer, 0 );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}


/*-----------------------------------------------------------*/
static void prvTxTask( void *pvParameters )
{
const TickType_t x1second = pdMS_TO_TICKS( DELAY_1_SECOND );

	for( ;; )
	{
		/* Delay for 1 second. */
		vTaskDelay( x1second );

		/* Send the next value on the queue.  The queue should always be
		empty at this point so a block time of 0 is used. */
		xQueueSend( xQueue,			/* The queue being written to. */
					HWstring, /* The address of the data being sent. */
					0UL );			/* The block time. */
	}
}

/*-----------------------------------------------------------*/
static void prvRxTask( void *pvParameters )
{
char Recdstring[15] = "";

	for( ;; )
	{
		/* Block to wait for data arriving on the queue. */
		xQueueReceive( 	xQueue,				/* The queue being read. */
						Recdstring,	/* Data is read into this address. */
						portMAX_DELAY );	/* Wait without a timeout for data. */

		/* Print the received data. */
		xil_printf( "Rx task received string from Tx task: %s\r\n", Recdstring );
		RxtaskCntr++;
	}
}

/*-----------------------------------------------------------*/
static void vTimerCallback( TimerHandle_t pxTimer )
{
	long lTimerId;
	configASSERT( pxTimer );

	lTimerId = ( long ) pvTimerGetTimerID( pxTimer );

	if (lTimerId != TIMER_ID) {
		xil_printf("FreeRTOS Hello World Example FAILED");
	}

	/* If the RxtaskCntr is updated every time the Rx task is called. The
	 Rx task is called every time the Tx task sends a message. The Tx task
	 sends a message every 1 second.
	 The timer expires after 10 seconds. We expect the RxtaskCntr to at least
	 have a value of 9 (TIMER_CHECK_THRESHOLD) when the timer expires. */
	if (RxtaskCntr >= TIMER_CHECK_THRESHOLD) {
		xil_printf("Successfully ran FreeRTOS Hello World Example");
	} else {
		xil_printf("FreeRTOS Hello World Example FAILED");
	}

	vTaskDelete( xRxTask );
	vTaskDelete( xTxTask );
}
void GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId, u16 GpioIntrId)
{
	XGpioPs_Config *ConfigPtr;	//stores the Configuration Settings of PS GPIO
	int Status;

	ConfigPtr = XGpioPs_LookupConfig(DeviceId);//Load the Configuration settings required for PS GPIO_0

	XGpioPs_CfgInitialize(Gpio, ConfigPtr, ConfigPtr->BaseAddr);//Create PS GPIO device using settings from "ConfigPtr" and
	//store the driver at 1st parameter"Gpio" address , so that "Gpio" acts as the Required PS GPIO_0 Driver

	/* Set the direction for the PS Push Button pin to be input */
	XGpioPs_SetDirectionPin(Gpio, Input_Pin, 0x0);

	/* Set the direction for the Red LED pin to be output. */
	XGpioPs_SetDirectionPin(Gpio, Output_Pin_R, 1u);
	XGpioPs_SetOutputEnablePin(Gpio, Output_Pin_R, 1u);
	XGpioPs_WritePin(Gpio, Output_Pin_R, 0x0);

	/* Set the direction for the Green LED pin to be output. */
	XGpioPs_SetDirectionPin(Gpio, Output_Pin_G, 1u);
	XGpioPs_SetOutputEnablePin(Gpio, Output_Pin_G, 1u);
	XGpioPs_WritePin(Gpio, Output_Pin_G, 0x0);

	/*
	 * Setup the interrupts such that interrupt processing can occur. If
	 * an error occurs then exit.
	 */
	Status = SetupInterruptSystem(Intc, Gpio, GPIO_INTERRUPT_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("\n  SetupInterruptSystem() setup has failed");
		return XST_FAILURE;
	}

	xil_printf("\n Press The PUSH Button \n\r");
	pattern = 0U;	//Used to Change by Pressing Push Button

	/*
	 * Loop forever while the button changes are handled by the interrupt
	 * level processing.
	 */

	int counter = 0;
	int oldCounter = counter;
	int position = 0;
	while(1){

		counter = MY_ROTARY_EN_mReadReg (XPAR_MY_ROTARY_EN_0_S00_AXI_BASEADDR, MY_ROTARY_EN_S00_AXI_SLV_REG3_OFFSET);
		if(counter/4 > oldCounter/4)
		{
			//gaat naar rechts
			if(position < 9){
				position++;
			}

		}
		else if(counter/4 < oldCounter/4)
		{
			//gaat naar links
			if(position > 0){
				position--;
			}

		}
		xil_printf("answer: %d \n\r", answer);


		if (i==1)
		{
			StateCounter = answer;
			if (value == answer)
			{
				XGpioPs_WritePin(Gpio, Output_Pin_R, 0x0);
				XGpioPs_WritePin(Gpio, Output_Pin_G, 0x1);
			}
			else
			{
				XGpioPs_WritePin(Gpio, Output_Pin_R, 0x1);
				XGpioPs_WritePin(Gpio, Output_Pin_G, 0x0);
			}
		}
		else
		{
			value = position;
			StateCounter = value;
			XGpioPs_WritePin(Gpio, Output_Pin_R, 0x0);
			XGpioPs_WritePin(Gpio, Output_Pin_G, 0x0);
		}

		oldCounter = counter;

		if (StateCounter == 0){ //0
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000001000001001);
		    		usleep_A9(15);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    		usleep_A9(4);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010100001111001);
		    		usleep_A9(15);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    		usleep_A9(4);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010100101101001);
		    		usleep_A9(15);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    		usleep_A9(4);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000010000001001);
		    		usleep_A9(15);
		    		MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    		usleep_A9(4);
				}/*KRRKRKKKKRRKRKRR
		                                                                                                                        --7768463515348221*/
				else if (StateCounter==1){ //1
			       	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000000100001001);
			       	usleep_A9(15);
			        	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
			        	usleep_A9(4);
			        	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001011011);
			        	usleep_A9(15);
			        	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
			        	usleep_A9(4);
			            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110001001101011);
			            usleep_A9(15);
			        	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
			        	usleep_A9(4);



		    	}

		    	else if (StateCounter==2){ //2
		    		                                                                                                            /*KRRKRKKKKRRKRKRR
		                                                                                                                        --7768463515348221*/
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000101001001011);
		    	usleep_A9(15);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    	usleep_A9(4);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010100000111001);
		    	usleep_A9(15);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    	usleep_A9(4);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000101101001);
		    	usleep_A9(15);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    	usleep_A9(4);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010110001001011);
		    	usleep_A9(15);
		    	MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		    	usleep_A9(4);
		        }

		        else if (StateCounter==3){ //3
		        	                                                                                                            /*KRRKRKKKKRRKRKRR
		        	                                                                                                            --7768463515348221*/
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100001001101001);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100000001111001);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100000101101001);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100010000001001);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);

		    	}
		        else if (StateCounter==4){ //4
		        	                                                                                                            /*KRRKRKKKKRRKRKRR
		        	                                                                                                            --7768463515348221*/
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110001000101011);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100000011011);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000000100001001);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110110000101011);
		        usleep_A9(15);
		        MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		        usleep_A9(4);

		    	}
		        else if (StateCounter==5){ //5
		        	                                                                                                                /*KRRKRKKKKRRKRKRR
		        	                                                                                                                --7768463515348221*/
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100001001001001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000001111001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000101101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100110000101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);

		    	}
		        else if (StateCounter==6){ //6
		        	                                                                                                                /*KRRKRKKKKRRKRKRR
		        	                                                                                                                --7768463515348221*/
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100001000001011);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000001111001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000101101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0100110000101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);

		    	}
		        else if (StateCounter==7){ //7
		        	                                                                                                                /*KRRKRKKKKRRKRKRR
		        	                                                                                                           -     -7768463515348221*/
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110101001101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000100000111001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110000101101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110110001001001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);


		    	}
		        else if (StateCounter==8){ //8
		        	                                                                                                                /*KRRKRKKKKRRKRKRR
		        	                                                                                                                --7768463515348221*/
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000001000001000);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000001111010);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000101101010);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000010000001000);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);

		    	}
		        else if (StateCounter==9){ //9
		        	                                                                                                                /*KRRKRKKKKRRKRKRR
		        	                                                                                                                --7768463515348221*/
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010001001001001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000001111001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0010000101101001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110100001101011);
		            usleep_A9(4);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0000010000001001);
		            usleep_A9(15);
		            MATRIX_IPBLOK_DEF_mWriteReg(XPAR_MATRIX_IPBLOK_DEF_0_S00_AXI_BASEADDR,MATRIX_IPBLOK_DEF_S00_AXI_SLV_REG0_OFFSET,0b0110110001101011);
		            usleep_A9(4);


		    }
	}

}

/****************************************************************************/
/**
* This function is the user layer callback function for the bank 0 interrupts of
* the GPIO device. It checks if all the switches have been pressed to stop the
* interrupt processing and exit from the example.
*
* @param	CallBackRef is a pointer to the upper layer callback reference.
* @param	Status is the Interrupt status of the GPIO bank.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void IntrHandler(void *CallBackRef, u32 Bank, u32 Status)
{
	//answer = rand() % 10; //put here for temper proof
	if (i == 0)
	{
		i = 1;
	}
	else
	{
		i = 0;
		answer = rand() % 10; //put here for demo
	}
}

/*****************************************************************************/
/**
*
* This function sets up the interrupt system for the example. It enables falling
* edge interrupts for all the pins of bank 0 in the GPIO device.
*
* @param	GicInstancePtr is a pointer to the XScuGic driver Instance.
* @param	GpioInstancePtr contains a pointer to the instance of the GPIO
*		component which is going to be connected to the interrupt
*		controller.
* @param	GpioIntrId is the interrupt Id and is typically
*		XPAR_<GICPS>_<GPIOPS_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
static int SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio,u16 GpioIntrId)
{
	int Status;

	XScuGic_Config *IntcConfig; /* Instance of the interrupt controller */

	Xil_ExceptionInit();

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(GicInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Connect the interrupt controller interrupt handler to the hardware
	 * interrupt handling logic in the processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler)XScuGic_InterruptHandler,
				GicInstancePtr);

	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above performs
	 * the specific interrupt processing for the device.
	 */
	Status = XScuGic_Connect(GicInstancePtr, GpioIntrId,
				(Xil_ExceptionHandler)XGpioPs_IntrHandler,
				(void *)Gpio);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	/* Enable Level edge interrupts for all the pins in bank 0 Except Pin "0" where Push Button is Connected.
		For Pin '0' We set Raising Edge Triggered Interrupt		*/
	XGpioPs_SetIntrType(Gpio, GPIO_BANK, 0x01, 0xFFFFFFFF, 0x00);

	/* Set the handler for gpio interrupts. */
	XGpioPs_SetCallbackHandler(Gpio, (void *)Gpio, IntrHandler);


	/* Enable the GPIO interrupts of Bank 0. */
	XGpioPs_IntrEnable(Gpio, GPIO_BANK, (1 << Input_Pin));


	/* Enable the interrupt for the GPIO device. */
	XScuGic_Enable(GicInstancePtr, GpioIntrId);


	/* Enable interrupts in the Processor. */
	Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);

	return XST_SUCCESS;
}
